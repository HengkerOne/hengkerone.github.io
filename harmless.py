
# SECURE PYTHON RUNTIME LOADER - Generated by HengkerOne
import marshal
import sys
import hashlib
import base64
import builtins
import hmac
import os
from cryptography.fernet import Fernet 
import binascii 

# ============================================================
# Ninja Toolkit - HengkerOne - Script Kiddie - SQLi Injection
# ------------------------------------------------------------------------------------------------------------------------
# Copyright (c) 2025 Ninja Toolkit Developers
# License: Ninja Toolkit
#
#THE SOFTWARE IS PROVIDED "HENGKERONE", WITHOUT WARRANTY OF ANY KIND.
# ============================================================

ITERATIONS = 600000
KEY_LEN = 44 
MASTER_KEY_LEN = 88
RANDOM_SALT_B64 = 'Szc7tHbZnmvIIpKYONxz3w=='
PASSPHRASE_B64 = 'RW5jeXB0X0J5ZV9IZW5na2VyT25lQFNjcmlwdF9LaWRkaWUvcloh' 
HMAC_KEY_DERIVATION_SALT = b'HMAC_SALT_FOR_INTEGRITY'
OBFUSCATED_FERNET_KEY_HEX = "b1aaf1a75782912dc036a65d1a222f05622bf68d30d6ec9abf961bfadbf9799b9341cc550ad7ae9c57cec11d"
ENCRYPTED_DATA_B64 = "Z0FBQUFBQm84UUwzOG5PT25DYi1PV1BhY1NaSVNGTURRUEUtSnNZVXRSSnlkTndORFBKWGFoR0MwQVBsUWlabVlyS21qa242Y2JLcTNIa0pPTFVYc3JRNlhBRDlnRUdFWUlVTHVzcmFKeVR0X0pWd1ZNc2h0Nmp2RS1vdjJVR25OZFA1VVlNN2VPVUR2bUNLUF9FX2hFUzNqS09hQkRBdEk0SlZ2YzBmemhlaFB6bEZsTHR3UEF5SENQcVlULVBMX3pvMW5pU09PZWxrQWRaRWN3a1Q5dHJtMlhROUZrc3RpQ2ZhbmIzQ1ZUR3g0MDNhTmlMeWtVUGVjcmhQTUstY0xaQnV1cjZZSDRXS3I2V1pFbUxXemlWVy04elFJQWpPSkZuTVFZLUlUa3ptXy1WcWlFcXhNVzVVZEM4MTNxSjc1aFlDUEIxbzl2UmdyT0N6SlhuRGNzakdPNlE2VjFUNzB3S0V1LVFUZkFlT2NEaTVhZDZzUzdsVjYxQnFhR3pDMHdzVklOSW1OY2cxMzN5TEZ1NEFQU0U5WUhZeXZobDlUQi12SmlIRVF4SE5tcWxvZ1JGc3NjOFhUbUJRMW16U25vYVEwWkhYYV9Ma3gyWFp6X3FXVDNlTUUzRDhuZTlDXzVWdDVmc3RHOE1vN2p2Q3FrTnk2cy1kU191YnVKb3pzS2VyWExJSW5FbWtzWTNQcVhNQnRBRXJWX2M3X3V2bFFYa3ZVUWRmeFJMd2hOeUVkVXNNMmEwaGxIcXlKU2hYYXZHUlE2eHhnMDlhalhpeFM0VDFuX1o2Q211aTF3QzJIampuc0ZVT255RnZUb093V0I3a1VoRlVMS3o5TnRqNEdyaUQwWjBQcTdkal9iWnNPOWNibFlkMk9rN19XX0RzaHQ2NENPSHlzQzhNV2RIVVEzLXQ1bGVxVmxLTDdXbUE2b29wMDRtOW81WlVfbENSMFh0UDFobXFhSl9Cb1RZS1lIRXhCeXl5NnFocC1OckprQ0pXclc5enQ4NkNWTkJZQ1RRczM4ckxaSVVqOHJnM3lGd0VuRF9MQlM4ZUVrWVd6R2NWRGhBbjhqc0hIZy1sT0xRQjZmSEcwbE5fSXdjcjhRUDk4eWpmVzdKUFVTT3B0S2hwalVEdmNsSWh5R0Q4X3RnTnlaWVZrTk1iNzNGMzRENndCZEtiWG9Fay1YUEFtcF9UNDFpMEJDTFYxT2d4dFpGamM2bWJObnVoZVJoZ2dlTlU2WWZWSDlMVDJXMVRCQVNWXy01MGdIcDdPTGQ5QTNucXl1UmdobS1Fa0NSY0VnSVNGQmc4QzlpQVM1QURGeGFGSE1TU2hNS1FTVFlua0FVM2U2c0h3aXcwb2UzZmpSbDJQR0VKN283alBUU3JaZWtKMklYelpaNHRvNENZNGI5MXRkZTY2Rmh5dmhlTm1rTnVJaHViekQxMkVaem8zUno5ZGVNZVV4YlQyUVhNdERnQTdBRDYwSUNlV3FfR0tCVEswZVZ4TFZCalN6aUtiRjFnNHZXX0VUZTR4Q3JpTDhiSkVkNEdkTTZEeGM3b0F1cHFkalI0X2FJcFVxM05nX0dhSUNuaE1HSkx2X05xNy1Jc2gyb1BXRFhVZmxfeWlRRmgweVQ1alYtUS1iY3lXeVVCWHVocV8wODJOQUlwdW1JTEFLbjJhNkh3YWNseWJLdk9abUoyUUxFUXJKaXBmZUZBckV6UHZ2Z09aRlNwZ2pmYlQxb2FMN3FTdGJhSDNuZ25nRzVtaC1fdlhLQm5QTTJQOG15dVY0b3FJb2wtR2JkVWxhdmZTel9YWjQ1Z1NfVjIwQUJzeHFVWmFSNlNRTkpoQ2hqSDdheGNDU2NiNU90bmlBY0xhclVJankyWVdRZVdZQ1ZCVmhZaDJUcmJxMjB0alAzeExmN1pNbDliWk5DRUY1UXNlRnBRWDBVYVdndmtEQUNPTGVKMHRHWGt5Y0xYRnItSk5wdDJfM1pNTmZrZ3Njd2hOVm9tcU9iNUFIa0dUYmxxVlJtcFBWVHZYS0RsRVlfQ1lwTzZxeFVhblBWVnlGLU9BSFBDSnNQbWM0V2FiZXdoRm5PcGpwbGZhSHJjQ0ZLYWFkR0VIYU1NM0JkYWdaR3J6MldhWG5hOWhQYTF4NG54a2VyZzdFelNKVzdJakpFQ29kRjBOUWo4UTA4b2tjOV84ZUxyLXdjbHpCZW9obnQxczR2S1N4TkxFUUE4Z2h4Y1FvRFluWG41LWhTTVg5RWxINkJFZHI1TDgtWnJBLWZ1eGdCc19uNE9LWGdGOGlRVkVGRlRUSlJFMUVIVktGdl95T0ZlSVNIdUpoeVowWHk4STNrelBUZXdOT3pRb3BfNWhQWTk1QUZsMnJSeGtFcFpzdTU0bFZtRzVOLXZPZFJDLW1jTlRLcDRfWnFpN1dNMDBLWHYzOUJoUi1oR3RUeERMeHB5NERtREZRYjZIb3kybXdoTHpKMFB2S01Zd1R6RkRiUFBITVJVN2tkLUxscFI4ZGFmSFV2MjhoaWREd1Ywb2FERnU4dmtQLTk4M0VpNDhoTmd0YXVaWFZXUmh5T05wQWV4WGEySDdnSmhXWEpUMHZtY29YQlVlZ19zS0RYeUVIcF9wZzNPQnc4dGNPVlJmYnFIOVVlRnRkNmxFYmY0WVhTMjNmZWREWDRXbC1xeWhNTGdrS1hPWlN3ZlBRNWNPbDJCX2R6bS1fRDRrOGFkNzNSOEwyME9QVVZXYndZQnYycmhYZHg5bC1EMTh4QzdxMjFhX01TV2hNc1BfZDltdWZFUjRXeHRFXzk0LVdlcWM3TjRCLWdPN2NzVGlyRlJmMzF4N3hNempWMHZuUG9NQnBhazY5OHg1TFFFR1lDUmxZZDVKdUszRlEtWThGcVk2N2VYdXNzcXpvdXBKTU5PLS0wZjI2ZVJ3aDgzY183Qkw3MWx4M3hvTUF1OUdfdU1JWXRCN1JIYXhiaFc5UnpGT0wzWkIxS2dtV0FKTXc2TGRUWExRNUF4YlV1bzNRLWx1djlsaEY0OURNNVFxRjJ1Sk1LejZMNFkzdVJNaGxwcUIxSzk2YUVGU0RDdlRfMUVhTVZ4SEhFTTNuaGdnOXotZFgwUFFpTmZsaXhrOWV0Qk5CUmgzQmY4MHYySWN6X0V2NWxqZ3dQM0R2TE55cGQ4dEgxZEJUV2JtV3V6UUhDMGFUZk82NkFfVnFaeU4tVWVOczltM21xZUtObGVSNU10bVZXNlgwS3owNjYtREk4MkJBWGpXWENaZ0k5S09raUptSDlMOUM2N3lRejdROVNPRks0cE5mR0hWalRsM1dJcGQ4aGlzWE9IeXY2VTFISTkyOFJaQU1DZmQ4cTlmdmJkOFBEMVlfNzNkYld5T2tRTjRaVWwxdmZCRUEtdFRIY1hSODRUMEpkdHZKMGQzMlNqa2xyZ29CUWFFUE1qNWtkLXFNdk9IWVdVdDhScU9Ic2lLZm9Ka0RnYVdab0lrMV9CQzFnY20xWklMUzdTQkQ2dU9FdFdDaVVpR3FUa0lvU21MZXB0dml4bldNOWxZaGZBUVZYSEtYUzcxbno2WWtiLUdkLXgwc2NtanJjeGZNM1NrSjdJTVhEc2pyY0k2Nlo5ckpyckFMVlg3cmlOU0h3ZnRnNTBpbmh1UWdQbTBRWUJwajZtaDBpanFsbzVrTHNZY1oyNzViSkZkT1VtVlVtSnNwdDJ3QTlkY1Y0bnlJczNwT1ZzcVVOS09EV1JPWDg5VW5kQnllVjR2Zk9BYXhNQ3hLYUNBYUdzMXVIeXBTTTl2MXNkWlVmbWtIQUhTYzh5a2phWlhZVVFJV1BsMU9LMF9GU21YQ3dUaHdOMExjc2R1eWFXMmlOa3BEWEN2dlNtRXhwUmV2X2wwR3VCWXlDeTNhLTJ4bHJ6em43YmJBUVBIN2pHTWZGX3V0dk12UlRjY24ydC13VUtEbU9zNmFxa2dYQ2ptbURvUE95WmRjR2FURDNrU3JzM1Zqd1dibmdrSlN4LW1wcGdrdGQxRzNmbmNDZFBobzd4UnhPUnZQU3Z3cEdTMGVqVVpDQ2FzXy1BYWo3UEpjUVFwdXJIMFhxUy1tSXZXMmtybTdRZU1LVFdBXzZ1NDlGVWlDb0FTR0Z4ZDl5al9mVXZtYkgwVFltRGpXOGZXSnRhUGlEdkFNbG9XdmRXR1ZPNjR0d1VDUVBuWXJlQWlweGlHZFZUdHZPdkMzRDVrNjhCb2ZpdkpMN2hhb1BMU0J4ckE4bl8yNXdXdDJLYTFKWTVtWVVLVjBzTW42N2hnXzRfNTJrckdPcUozT2hGLXZscXdOVkxnOEtEUGdzZzZqS3F5Nm0wMm9hVEpsUmdHWGp0Q0pTNTZMenpadXM5N21rZDZPMnFPbHdEbDkzLTRsaVBHYmZtSmIyLXQxMEQ0bVFZU2ZRbWVCUC12SW82bVFxd2dKbFRKbV9wMXpLNmk2SXpDX0JmckhjNVdjMGpMUjlLX2xHVmhoUUhZZU9ZVF92YnZnel9RVzJHRGR1d0ZkcDRqWU9oYVFsLVhVRVB2bUVDQlQzOHAwb2ktRVk3NWFGZmNkZi1TQjJiQmRJY1Z6clpaRXE0SlQyV2dtNWg3MWxsSUUycHU0S240YUM3WkV4eHBWTEFtNFZBajlkTUVkQnp3bmpMb0ZxT3BGNUdjZzJEcHZ1SWtES3RvVmlBZTl3STZxTDB5a092Ukp4NjZleU9kYXdTbW1hMkdMeUozNXZZTnBVTzJ5SDhqUzVDYy14clpLTXJBYXhYT3lSMktPdU9TX1p2Ri01UVFKNV96T2tuNFZzM0xSM3c1ekZSbkFrZnZHRVpsRnpqaGRzT25nUlJILWpEQXFyTGlzRUVQUVl2UVNkVUdub1dRSjZhcl9lRDgzOG0xYmZtQ2VtenQteDRmT3ZLUVRwc05vQUhGd3V4VmtBT0xrRFM3TUxWYW1DVjdBM3VXaXJORzhIcDZzTlVzNHhQX0JQMDJ3NzdLWDlvVDRCRkQ2ZXBvZnJkNmZPVkNZdUI1TVJPOUlGcVZiT3htTHFnRG92NElPR2tBUU1sNDVRMkNfem4yVWJYb1V2RUpGOXoycGdVRFo1ZmZjUTVQbkI0ZjBtTk9ZVWhFdUI4UWlCR29LUE5OcXRVZnduQ1ZvR0JGd3JDYjhxNWpfeHUyeDRyNnJKRzg2S3BpTXBEaFZrYVFGblFsT0lxeW9ZQVA5VF9WUEZ6OWRkQXVZbll3YkdSbGhpWGdoT0JkUDl6MnhlczROLUt5ZjMzYk9OU09wZ3U2bXpfZ1VXT0gxRmpKejBKaUlPQnhkWjdKcFk5dXpBVmo3TUFISlVzNFcxSG5jNVNabzZsWnZGN0lkdk5kZm15UUVQNUtMOWNDNlJTd2ZTNG9La2JrVXpSNHFfX3ZVMGRsUmx4VHUyQXQ0ckNTWXhXWU1rUi0zNFpwSGM0eGo0RVJzNFlmTUt4QXVVMTFMSWstclBmM0ZDMjBpaUlyN1gwaFc3LTRKN18ycXI1dUZ5RFBhb3lPdDFJVy1JMUdHS3lsam1IU3RkaTlLQ2k4TDl0RWhvNXZ2TUUtalowVXlBR0RBc3lzdjIwVDFYWlczbS00M2NkUzczdEkxTE1kcklsdVFDYlJkMDBpcE5PNmZieDNiY0tWYlRaanFYYVpNY21tVWRFZ29qQUZVYVJDM1Q1STlFUUJQZUp1bzRHaVpGSkpmQjRKeTllYTNULS15V0gxREt4T0Y3XzlvaTN6VDZZT0xDSzRGUmtpbEtqcmc9PQ=="
EXPECTED_HMAC = "dc8ebefa0a2135bf8681ff49e58653119359adaba380a9bfcd50008d64de9579"

def check_debugger():
    if getattr(sys, 'gettrace')() is not None:
        return True
    try:
        with open('/proc/self/status', 'r') as f:
            if 'TracerPid:\t0' not in f.read():
                return True
    except Exception:
        pass
    return False

def master_key_derivation(salt_bytes, passphrase_bytes, iterations):
    master_key = hashlib.pbkdf2_hmac(
        'sha256', 
        passphrase_bytes, 
        salt_bytes, 
        iterations, 
        dklen=int(MASTER_KEY_LEN)
    )
    return master_key

if check_debugger():
    sys.exit(0)

try:
    PASSPHRASE_BYTES = base64.b64decode(PASSPHRASE_B64)
    RANDOM_SALT = base64.b64decode(RANDOM_SALT_B64)
    MASTER_KEY = master_key_derivation(RANDOM_SALT, PASSPHRASE_BYTES, ITERATIONS)
    
    FERNET_RAW_KEY = MASTER_KEY[:32]
    EXPECTED_FERNET_KEY = base64.urlsafe_b64encode(FERNET_RAW_KEY)
    XOR_KEY = MASTER_KEY[32:32 + int(KEY_LEN)] 

    obfuscated_key_bytes = bytes.fromhex(OBFUSCATED_FERNET_KEY_HEX)
    DE_OBFUSCATED_FERNET_KEY = bytes([a ^ b for a, b in zip(obfuscated_key_bytes, XOR_KEY)])
    
    if DE_OBFUSCATED_FERNET_KEY != EXPECTED_FERNET_KEY:
         raise ValueError("De-obfuscated key integrity check failed.")
         
    FERNET_KEY = DE_OBFUSCATED_FERNET_KEY 
    
    HMAC_KEY = hashlib.sha256(PASSPHRASE_BYTES + RANDOM_SALT + HMAC_KEY_DERIVATION_SALT).digest()
    
    final_cipher = Fernet(FERNET_KEY)

except Exception:
    sys.stderr.write("[-] Error Kunci: " + str(sys.exc_info()[1]) + "\n")
    sys.exit(1)

try:
    encrypted_data = base64.b64decode(ENCRYPTED_DATA_B64)

    current_hmac = hmac.new(HMAC_KEY, encrypted_data, hashlib.sha256).hexdigest()
    
    if not hmac.compare_digest(current_hmac, EXPECTED_HMAC):
        sys.stderr.write("[-] Deteksi Tampering Data (HMAC Failed). Menghentikan eksekusi.\n")
        sys.exit(1)
    
    decrypted_data = final_cipher.decrypt(encrypted_data)
    code_object = marshal.loads(decrypted_data)
    
    getattr(builtins, 'exec')(code_object)

except Exception:
    sys.stderr.write("[-] Gagal memulai runtime aman. Kode mungkin rusak atau dimodifikasi. \n")
    sys.exit(1)
  
